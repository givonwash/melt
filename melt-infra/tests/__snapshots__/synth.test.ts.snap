// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Synthesis airbyte 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "sweep-pod.sh": "#!/bin/bash
get_job_pods () {
    kubectl -n \${KUBE_NAMESPACE} -L airbyte -l airbyte=job-pod \\
      get pods \\
      -o=jsonpath='{range .items[*]} {.metadata.name} {.status.phase} {.status.conditions[0].lastTransitionTime} {.status.startTime}{"\\n"}{end}'
}
delete_pod() {
    printf "From status '%s' since '%s', " $2 $3
    echo "$1" | grep -v "STATUS" | awk '{print $1}' | xargs --no-run-if-empty kubectl -n \${KUBE_NAMESPACE} delete pod
}
while :
do
    echo "Starting pod sweeper cycle:"

    if [ -n "\${RUNNING_TTL_MINUTES}" ]; then 
      # Time window for running pods
      RUNNING_DATE_STR=\`date -d "now - \${RUNNING_TTL_MINUTES} minutes" --utc -Ins\`
      RUNNING_DATE=\`date -d $RUNNING_DATE_STR +%s\`
      echo "Will sweep running pods from before \${RUNNING_DATE_STR}"
    fi

    if [ -n "\${SUCCEEDED_TTL_MINUTES}" ]; then 
      # Shorter time window for succeeded pods
      SUCCESS_DATE_STR=\`date -d "now - \${SUCCEEDED_TTL_MINUTES} minutes" --utc -Ins\`
      SUCCESS_DATE=\`date -d $SUCCESS_DATE_STR +%s\`
      echo "Will sweep succeeded pods from before \${SUCCESS_DATE_STR}"
    fi

    if [ -n "\${UNSUCCESSFUL_TTL_MINUTES}" ]; then 
      # Longer time window for unsuccessful pods (to debug)
      NON_SUCCESS_DATE_STR=\`date -d "now - \${UNSUCCESSFUL_TTL_MINUTES} minutes" --utc -Ins\`
      NON_SUCCESS_DATE=\`date -d $NON_SUCCESS_DATE_STR +%s\`
      echo "Will sweep unsuccessful pods from before \${NON_SUCCESS_DATE_STR}"
    fi
    (
        IFS=$'\\n'
        for POD in \`get_job_pods\`; do
            IFS=' '
            POD_NAME=\`echo $POD | cut -d " " -f 1\`
            POD_STATUS=\`echo $POD | cut -d " " -f 2\`
            POD_DATE_STR=\`echo $POD | cut -d " " -f 3\`
            POD_START_DATE_STR=\`echo $POD | cut -d " " -f 4\`
            POD_DATE=\`date -d \${POD_DATE_STR:-$POD_START_DATE_STR} '+%s'\`
            if [ -n "\${RUNNING_TTL_MINUTES}" ] && [ "$POD_STATUS" = "Running" ]; then
              if [ "$POD_DATE" -lt "$RUNNING_DATE" ]; then
                  delete_pod "$POD_NAME" "$POD_STATUS" "$POD_DATE_STR"
              fi
            elif [ -n "\${SUCCEEDED_TTL_MINUTES}" ] && [ "$POD_STATUS" = "Succeeded" ]; then
              if [ "$POD_DATE" -lt "$SUCCESS_DATE" ]; then
                  delete_pod "$POD_NAME" "$POD_STATUS" "$POD_DATE_STR"
              fi
            elif [ -n "\${UNSUCCESSFUL_TTL_MINUTES}" ] && [ "$POD_STATUS" != "Running" ] && [ "$POD_STATUS" != "Succeeded" ]; then
              if [ "$POD_DATE" -lt "$NON_SUCCESS_DATE" ]; then
                  delete_pod "$POD_NAME" "$POD_STATUS" "$POD_DATE_STR"
              fi
            fi
        done
    )
    echo "Completed pod sweeper cycle.  Sleeping for 60 seconds..."
    sleep 60
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "pod-sweeper",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "pod-sweeper-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-pod-sweeper-sweep-pod-script",
      "namespace": "melt-airbyte-namespace",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "development.yaml": "# when modifying, remember to update the docker-compose version of this file in temporal/dynamicconfig/development.yaml
frontend.enableClientVersionCheck:
  - value: true
    constraints: {}
history.persistenceMaxQPS:
  - value: 3000
    constraints: {}
frontend.persistenceMaxQPS:
  - value: 3000
    constraints: {}
frontend.historyMgrNumConns:
  - value: 30
    constraints: {}
frontend.throttledLogRPS:
  - value: 20
    constraints: {}
history.historyMgrNumConns:
  - value: 50
    constraints: {}
system.advancedVisibilityWritingMode:
  - value: "off"
    constraints: {}
history.defaultActivityRetryPolicy:
  - value:
      InitialIntervalInSeconds: 1
      MaximumIntervalCoefficient: 100.0
      BackoffCoefficient: 2.0
      MaximumAttempts: 0
history.defaultWorkflowRetryPolicy:
  - value:
      InitialIntervalInSeconds: 1
      MaximumIntervalCoefficient: 100.0
      BackoffCoefficient: 2.0
      MaximumAttempts: 0
# Limit for responses. This mostly impacts discovery jobs since they have the largest responses.
limit.blobSize.error:
  - value: 15728640 # 15MB
    constraints: {}
limit.blobSize.warn:
  - value: 10485760 # 10MB
    constraints: {}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "temporal",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "temporal-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-temporal-dynamicconfig",
      "namespace": "melt-airbyte-namespace",
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "airbyte-admin-role",
      "namespace": "melt-airbyte-namespace",
    },
    "rules": [
      {
        "apiGroups": [
          "*",
        ],
        "resources": [
          "jobs",
          "pods",
          "pods/log",
          "pods/exec",
          "pods/attach",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update",
          "patch",
          "delete",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "airbyte-admin-binding",
      "namespace": "melt-airbyte-namespace",
    },
    "roleRef": {
      "apiGroup": "",
      "kind": "Role",
      "name": "airbyte-admin-role",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "airbyte-admin",
      },
    ],
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte-api-server",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-api-server-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-api-server-svc",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": "http",
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "airbyte-api-server",
      },
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "connector-builder-server",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "connector-builder-server-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-connector-builder-server-svc",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": "http",
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "connector-builder-server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "server",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "server-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-server-svc",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 8001,
          "protocol": "TCP",
          "targetPort": "http",
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "server",
      },
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "temporal",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "temporal-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-temporal",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "port": 7233,
          "protocol": "TCP",
          "targetPort": 7233,
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "temporal",
      },
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "webapp",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "webapp-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-webapp-svc",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": "http",
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "webapp",
      },
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte-api-server",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-api-server-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-api-server",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "airbyte-api-server",
        },
      },
      "strategy": {
        "type": "Recreate",
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "airbyte-api-server",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "INTERNAL_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONFIG_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_ENABLED",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_ENABLED",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_STATSD_FLAVOR",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_STATSD_FLAVOR",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SEGMENT_WRITE_KEY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "SEGMENT_WRITE_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TRACKING_STRATEGY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TRACKING_STRATEGY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SECRET_PERSISTENCE",
                },
              ],
              "image": "airbyte/airbyte-api-server:0.60.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "name": "airbyte-api-server",
              "ports": [
                {
                  "containerPort": 8006,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
          "serviceAccountName": "airbyte-admin",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "connector-builder-server",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "connector-builder-server-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-connector-builder-server",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "connector-builder-server",
        },
      },
      "strategy": {},
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "connector-builder-server",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "AIRBYTE_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_ENABLED",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_ENABLED",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_STATSD_FLAVOR",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_STATSD_FLAVOR",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SEGMENT_WRITE_KEY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "SEGMENT_WRITE_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TRACKING_STRATEGY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TRACKING_STRATEGY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
              ],
              "image": "airbyte/connector-builder-server:0.60.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/v1/health",
                  "port": "http",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "name": "airbyte-connector-builder-server",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/v1/health",
                  "port": "http",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
          "serviceAccountName": "airbyte-admin",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "cron",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "cron-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-cron",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "cron",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "cron",
          },
        },
        "spec": {
          "automountServiceAccountToken": true,
          "containers": [
            {
              "env": [
                {
                  "name": "AIRBYTE_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_ENABLED",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_ENABLED",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_STATSD_FLAVOR",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_STATSD_FLAVOR",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICRONAUT_ENVIRONMENTS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CRON_MICRONAUT_ENVIRONMENTS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TEMPORAL_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TEMPORAL_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SEGMENT_WRITE_KEY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "SEGMENT_WRITE_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TRACKING_STRATEGY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TRACKING_STRATEGY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKFLOW_FAILURE_RESTART_DELAY_SECONDS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKFLOW_FAILURE_RESTART_DELAY_SECONDS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKLOAD_API_BEARER_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "WORKLOAD_API_BEARER_TOKEN",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "WORKLOAD_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKLOAD_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKSPACE_DOCKER_MOUNT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKSPACE_DOCKER_MOUNT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKSPACE_ROOT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKSPACE_ROOT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_DB",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_DB",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_USER",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "DATABASE_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_PASSWORD",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "DATABASE_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
              ],
              "image": "airbyte/cron:0.60.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "airbyte-cron",
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
          "serviceAccountName": "airbyte-admin",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "pod-sweeper",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "pod-sweeper-0.86.3",
        "namespace": "melt-airbyte-namespace",
      },
      "name": "melt-airbyte-helm-c8097189-pod-sweeper-pod-sweeper",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "pod-sweeper",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/sweep-pod-script": "0d73bcea48521ae155c2254c4a6627405342842d5a55b014985653161bad967c",
          },
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "pod-sweeper",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "/bin/bash",
                "-c",
                "/script/sweep-pod.sh",
              ],
              "env": [
                {
                  "name": "KUBE_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "RUNNING_TTL_MINUTES",
                  "value": "",
                },
                {
                  "name": "SUCCEEDED_TTL_MINUTES",
                  "value": "10",
                },
                {
                  "name": "UNSUCCESSFUL_TTL_MINUTES",
                  "value": "120",
                },
              ],
              "image": "bitnami/kubectl:1.28.9",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-ec",
                    "grep -aq sweep-pod.sh /proc/1/cmdline",
                  ],
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 5,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "airbyte-pod-sweeper",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-ec",
                    "grep -aq sweep-pod.sh /proc/1/cmdline",
                  ],
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 5,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1001,
                "runAsNonRoot": true,
                "runAsUser": 1001,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/script/sweep-pod.sh",
                  "name": "sweep-pod-script",
                  "subPath": "sweep-pod.sh",
                },
                {
                  "mountPath": "/.kube",
                  "name": "kube-config",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "airbyte-admin",
          "volumes": [
            {
              "emptyDir": {},
              "name": "kube-config",
            },
            {
              "configMap": {
                "defaultMode": 493,
                "name": "melt-airbyte-helm-c8097189-pod-sweeper-sweep-pod-script",
              },
              "name": "sweep-pod-script",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "server",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "server-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-server",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "server",
        },
      },
      "strategy": {
        "type": "Recreate",
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "server",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "AIRBYTE_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_EDITION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_EDITION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AUTO_DETECT_SCHEMA",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AUTO_DETECT_SCHEMA",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONFIG_ROOT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONFIG_ROOT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "LOG4J_CONFIGURATION_FILE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "LOG4J_CONFIGURATION_FILE",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_ENABLED",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_ENABLED",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_STATSD_FLAVOR",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_STATSD_FLAVOR",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SEGMENT_WRITE_KEY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "SEGMENT_WRITE_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TRACKING_STRATEGY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TRACKING_STRATEGY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKER_ENVIRONMENT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKER_ENVIRONMENT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKSPACE_ROOT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKSPACE_ROOT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WEBAPP_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WEBAPP_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TEMPORAL_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TEMPORAL_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "INFO",
                },
                {
                  "name": "JOB_MAIN_CONTAINER_CPU_REQUEST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_CPU_REQUEST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOB_MAIN_CONTAINER_CPU_LIMIT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_CPU_LIMIT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOB_MAIN_CONTAINER_MEMORY_REQUEST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_MEMORY_REQUEST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOB_MAIN_CONTAINER_MEMORY_LIMIT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_MEMORY_LIMIT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "KEYCLOAK_INTERNAL_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "KEYCLOAK_INTERNAL_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONNECTOR_BUILDER_SERVER_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONNECTOR_BUILDER_SERVER_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_API_AUTH_HEADER_NAME",
                  "value": "X-Airbyte-Auth",
                },
                {
                  "name": "AIRBYTE_API_AUTH_HEADER_VALUE",
                  "value": "Internal server",
                },
                {
                  "name": "SECRET_PERSISTENCE",
                },
                {
                  "name": "STORAGE_TYPE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_TYPE",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_ACTIVITY_PAYLOAD",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_ACTIVITY_PAYLOAD",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_LOG",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_LOG",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_STATE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_STATE",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_WORKLOAD_OUTPUT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_WORKLOAD_OUTPUT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "S3_PATH_STYLE_ACCESS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "S3_PATH_STYLE_ACCESS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AWS_ACCESS_KEY_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DEFAULT_MINIO_ACCESS_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "AWS_SECRET_ACCESS_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DEFAULT_MINIO_SECRET_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "MINIO_ENDPOINT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MINIO_ENDPOINT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_DB",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_DB",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_USER",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "DATABASE_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_PASSWORD",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "DATABASE_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
              ],
              "image": "airbyte/server:0.60.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/api/v1/health",
                  "port": "http",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "name": "airbyte-server-container",
              "ports": [
                {
                  "containerPort": 8001,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/api/v1/health",
                  "port": "http",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
          "serviceAccountName": "airbyte-admin",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "temporal",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "temporal-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-temporal",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "temporal",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "temporal",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "AUTO_SETUP",
                  "value": "true",
                },
                {
                  "name": "DB",
                  "value": "postgresql",
                },
                {
                  "name": "DYNAMIC_CONFIG_FILE_PATH",
                  "value": "config/dynamicconfig/development.yaml",
                },
                {
                  "name": "POSTGRES_SEEDS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DB_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "POSTGRES_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_USER",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "POSTGRES_PWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_PASSWORD",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
              ],
              "image": "temporalio/auto-setup:1.23.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "airbyte-temporal",
              "ports": [
                {
                  "containerPort": 7233,
                },
              ],
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/temporal/config/dynamicconfig/",
                  "name": "airbyte-temporal-dynamicconfig",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
          "serviceAccountName": "airbyte-admin",
          "volumes": [
            {
              "configMap": {
                "items": [
                  {
                    "key": "development.yaml",
                    "path": "development.yaml",
                  },
                ],
                "name": "melt-airbyte-helm-c8097189-temporal-dynamicconfig",
              },
              "name": "airbyte-temporal-dynamicconfig",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "webapp",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "webapp-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-webapp",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "webapp",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "webapp",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "TRACKING_STRATEGY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TRACKING_STRATEGY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_SERVER_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_SERVER_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "KEYCLOAK_INTERNAL_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "KEYCLOAK_INTERNAL_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONNECTOR_BUILDER_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONNECTOR_BUILDER_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AIRBYTE_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "API_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "API_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONNECTOR_BUILDER_API_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONNECTOR_BUILDER_API_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
              ],
              "image": "airbyte/webapp:0.60.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": "http",
                },
                "timeoutSeconds": 1,
              },
              "name": "airbyte-webapp-container",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/index.html",
                  "port": "http",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 101,
                "runAsNonRoot": true,
                "runAsUser": 101,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
            },
          ],
          "securityContext": {
            "fsGroup": 101,
          },
          "serviceAccountName": "airbyte-admin",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "worker",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "worker-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-worker",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "worker",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "worker",
          },
        },
        "spec": {
          "automountServiceAccountToken": true,
          "containers": [
            {
              "env": [
                {
                  "name": "AIRBYTE_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AIRBYTE_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONFIG_ROOT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONFIG_ROOT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "LOG4J_CONFIGURATION_FILE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "LOG4J_CONFIGURATION_FILE",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_ENABLED",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_ENABLED",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICROMETER_METRICS_STATSD_FLAVOR",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MICROMETER_METRICS_STATSD_FLAVOR",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SEGMENT_WRITE_KEY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "SEGMENT_WRITE_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STATSD_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STATSD_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TRACKING_STRATEGY",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TRACKING_STRATEGY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKSPACE_DOCKER_MOUNT",
                  "value": "workspace",
                },
                {
                  "name": "WORKSPACE_ROOT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKSPACE_ROOT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "LOCAL_ROOT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "LOCAL_ROOT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WEBAPP_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WEBAPP_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TEMPORAL_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TEMPORAL_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "TEMPORAL_WORKER_PORTS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "TEMPORAL_WORKER_PORTS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "INFO",
                },
                {
                  "name": "JOB_KUBE_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "JOB_KUBE_SERVICEACCOUNT",
                  "value": "airbyte-admin",
                },
                {
                  "name": "JOB_MAIN_CONTAINER_CPU_REQUEST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_CPU_REQUEST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOB_MAIN_CONTAINER_CPU_LIMIT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_CPU_LIMIT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOB_MAIN_CONTAINER_MEMORY_REQUEST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_MEMORY_REQUEST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOB_MAIN_CONTAINER_MEMORY_LIMIT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOB_MAIN_CONTAINER_MEMORY_LIMIT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "INTERNAL_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "INTERNAL_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKLOAD_API_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKLOAD_API_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKLOAD_API_BEARER_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "WORKLOAD_API_BEARER_TOKEN",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "METRIC_CLIENT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "METRIC_CLIENT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "OTEL_COLLECTOR_ENDPOINT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "OTEL_COLLECTOR_ENDPOINT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "ACTIVITY_MAX_ATTEMPT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ACTIVITY_MAX_ATTEMPT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "WORKFLOW_FAILURE_RESTART_DELAY_SECONDS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKFLOW_FAILURE_RESTART_DELAY_SECONDS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AUTO_DETECT_SCHEMA",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "AUTO_DETECT_SCHEMA",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SHOULD_RUN_NOTIFY_WORKFLOWS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "SHOULD_RUN_NOTIFY_WORKFLOWS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "MICRONAUT_ENVIRONMENTS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "WORKERS_MICRONAUT_ENVIRONMENTS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "SECRET_PERSISTENCE",
                },
                {
                  "name": "STORAGE_TYPE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_TYPE",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_ACTIVITY_PAYLOAD",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_ACTIVITY_PAYLOAD",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_LOG",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_LOG",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_STATE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_STATE",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "STORAGE_BUCKET_WORKLOAD_OUTPUT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "STORAGE_BUCKET_WORKLOAD_OUTPUT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "S3_PATH_STYLE_ACCESS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "S3_PATH_STYLE_ACCESS",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "AWS_ACCESS_KEY_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DEFAULT_MINIO_ACCESS_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "AWS_SECRET_ACCESS_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DEFAULT_MINIO_SECRET_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "MINIO_ENDPOINT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "MINIO_ENDPOINT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_HOST",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_HOST",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_PORT",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_PORT",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_DB",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_DB",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "DATABASE_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_USER",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "DATABASE_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DATABASE_PASSWORD",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "DATABASE_URL",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DATABASE_URL",
                      "name": "melt-airbyte-helm-c8097189-airbyte-env",
                    },
                  },
                },
                {
                  "name": "CONTAINER_ORCHESTRATOR_ENABLED",
                  "value": "true",
                },
              ],
              "image": "airbyte/worker:0.60.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": "heartbeat",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "airbyte-worker-container",
              "ports": [
                {
                  "containerPort": 9000,
                  "name": "heartbeat",
                },
                {
                  "containerPort": 9001,
                },
                {
                  "containerPort": 9002,
                },
                {
                  "containerPort": 9003,
                },
                {
                  "containerPort": 9004,
                },
                {
                  "containerPort": 9005,
                },
                {
                  "containerPort": 9006,
                },
                {
                  "containerPort": 9007,
                },
                {
                  "containerPort": 9008,
                },
                {
                  "containerPort": 9009,
                },
                {
                  "containerPort": 9010,
                },
                {
                  "containerPort": 9011,
                },
                {
                  "containerPort": 9012,
                },
                {
                  "containerPort": 9013,
                },
                {
                  "containerPort": 9014,
                },
                {
                  "containerPort": 9015,
                },
                {
                  "containerPort": 9016,
                },
                {
                  "containerPort": 9017,
                },
                {
                  "containerPort": 9018,
                },
                {
                  "containerPort": 9019,
                },
                {
                  "containerPort": 9020,
                },
                {
                  "containerPort": 9021,
                },
                {
                  "containerPort": 9022,
                },
                {
                  "containerPort": 9023,
                },
                {
                  "containerPort": 9024,
                },
                {
                  "containerPort": 9025,
                },
                {
                  "containerPort": 9026,
                },
                {
                  "containerPort": 9027,
                },
                {
                  "containerPort": 9028,
                },
                {
                  "containerPort": 9029,
                },
                {
                  "containerPort": 9030,
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": "heartbeat",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
          "serviceAccountName": "airbyte-admin",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-10",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "airbyte-admin",
      "namespace": "melt-airbyte-namespace",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-weight": "-1",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
      "namespace": "melt-airbyte-namespace",
    },
    "stringData": {
      "DATABASE_PASSWORD": "airbyte",
      "DATABASE_USER": "airbyte",
      "DEFAULT_MINIO_ACCESS_KEY": "minio",
      "DEFAULT_MINIO_SECRET_KEY": "minio123",
      "WORKLOAD_API_BEARER_TOKEN": ".Values.workload-api.bearerToken",
    },
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS": "",
      "ACTIVITY_MAX_ATTEMPT": "",
      "ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS": "",
      "AIRBYTE_API_HOST": "http://melt-airbyte-helm-c8097189-airbyte-server-svc:8001/api/public",
      "AIRBYTE_EDITION": "community",
      "AIRBYTE_SERVER_HOST": "melt-airbyte-helm-c8097189-airbyte-server-svc:8001",
      "AIRBYTE_URL": "http://localhost",
      "AIRBYTE_VERSION": "0.60.1",
      "API_URL": "/api/v1/",
      "AUTO_DETECT_SCHEMA": "true",
      "CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION": "0.35.15.001",
      "CONFIG_API_HOST": "http://melt-airbyte-helm-c8097189-airbyte-server-svc:8001",
      "CONFIG_ROOT": "/configs",
      "CONNECTOR_BUILDER_API_HOST": "melt-airbyte-helm-c8097189-airbyte-connector-builder-server-svc:80",
      "CONNECTOR_BUILDER_API_URL": "/connector-builder-api",
      "CONNECTOR_BUILDER_SERVER_API_HOST": "http://melt-airbyte-helm-c8097189-airbyte-connector-builder-server-svc:80",
      "CONTAINER_ORCHESTRATOR_IMAGE": "",
      "CRON_MICRONAUT_ENVIRONMENTS": "control-plane",
      "DATABASE_DB": "db-airbyte",
      "DATABASE_HOST": "airbyte-db-svc",
      "DATABASE_PORT": "5432",
      "DATABASE_URL": "jdbc:postgresql://airbyte-db-svc:5432/db-airbyte",
      "DATA_DOCKER_MOUNT": "airbyte_data",
      "DB_DOCKER_MOUNT": "airbyte_db",
      "GOOGLE_APPLICATION_CREDENTIALS": "/secrets/gcs-log-creds/gcp.json",
      "INTERNAL_API_HOST": "melt-airbyte-helm-c8097189-airbyte-server-svc:8001",
      "JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION": "0.29.15.001",
      "JOB_MAIN_CONTAINER_CPU_LIMIT": "",
      "JOB_MAIN_CONTAINER_CPU_REQUEST": "",
      "JOB_MAIN_CONTAINER_MEMORY_LIMIT": "",
      "JOB_MAIN_CONTAINER_MEMORY_REQUEST": "",
      "KEYCLOAK_DATABASE_URL": "


jdbc:postgresql://airbyte-db-svc:5432/db-airbyte?currentSchema=keycloak",
      "KEYCLOAK_INTERNAL_HOST": "localhost",
      "KUBERNETES_CLIENT_MAX_IDLE_CONNECTIONS": "",
      "LAUNCHER_MICRONAUT_ENVIRONMENTS": "control-plane,oss",
      "LOCAL_ROOT": "/tmp/airbyte_local",
      "LOG4J_CONFIGURATION_FILE": "log4j2-minio.xml",
      "MAX_NOTIFY_WORKERS": "5",
      "METRIC_CLIENT": "",
      "MICROMETER_METRICS_ENABLED": "false",
      "MICROMETER_METRICS_STATSD_FLAVOR": "datadog",
      "MINIO_ENDPOINT": "http://airbyte-minio-svc:9000",
      "OTEL_COLLECTOR_ENDPOINT": "",
      "RUN_DATABASE_MIGRATION_ON_STARTUP": "true",
      "S3_PATH_STYLE_ACCESS": "true",
      "SEGMENT_WRITE_KEY": "7UDdp5K55CyiGgsauOr2pNNujGvmhaeu",
      "SHOULD_RUN_NOTIFY_WORKFLOWS": "true",
      "STATSD_HOST": "localhost",
      "STATSD_PORT": "8125",
      "STORAGE_BUCKET_ACTIVITY_PAYLOAD": "airbyte-storage",
      "STORAGE_BUCKET_LOG": "airbyte-storage",
      "STORAGE_BUCKET_STATE": "airbyte-storage",
      "STORAGE_BUCKET_WORKLOAD_OUTPUT": "airbyte-storage",
      "STORAGE_TYPE": "minio",
      "TEMPORAL_HOST": "melt-airbyte-helm-c8097189-temporal:7233",
      "TEMPORAL_WORKER_PORTS": "9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040",
      "TRACKING_STRATEGY": "segment",
      "WEBAPP_URL": "http://melt-airbyte-helm-c8097189-airbyte-webapp-svc:80",
      "WORKERS_MICRONAUT_ENVIRONMENTS": "control-plane",
      "WORKER_ENVIRONMENT": "kubernetes",
      "WORKFLOW_FAILURE_RESTART_DELAY_SECONDS": "",
      "WORKLOAD_API_HOST": "http://localhost",
      "WORKLOAD_LAUNCHER_PARALLELISM": "10",
      "WORKSPACE_DOCKER_MOUNT": "airbyte_workspace",
      "WORKSPACE_ROOT": "/workspace",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-weight": "-1",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-env",
      "namespace": "melt-airbyte-namespace",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-1",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-db",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "airbyte-db-svc",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "port": 5432,
          "protocol": "TCP",
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-db",
      },
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-1",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-minio",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "airbyte-minio-svc",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "ports": [
        {
          "port": 9000,
          "protocol": "TCP",
          "targetPort": 9000,
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-minio",
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-weight": "0",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte-bootloader",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-bootloader-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-airbyte-bootloader",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "containers": [
        {
          "env": [
            {
              "name": "AIRBYTE_VERSION",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "AIRBYTE_VERSION",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
            {
              "name": "RUN_DATABASE_MIGRATION_ON_STARTUP",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "RUN_DATABASE_MIGRATION_ON_STARTUP",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
            {
              "name": "DATABASE_HOST",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "DATABASE_HOST",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
            {
              "name": "DATABASE_PORT",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "DATABASE_PORT",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
            {
              "name": "DATABASE_DB",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "DATABASE_DB",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
            {
              "name": "DATABASE_USER",
              "valueFrom": {
                "secretKeyRef": {
                  "key": "DATABASE_USER",
                  "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                },
              },
            },
            {
              "name": "DATABASE_PASSWORD",
              "valueFrom": {
                "secretKeyRef": {
                  "key": "DATABASE_PASSWORD",
                  "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                },
              },
            },
            {
              "name": "DATABASE_URL",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "DATABASE_URL",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
          ],
          "image": "airbyte/bootloader:0.60.1",
          "imagePullPolicy": "IfNotPresent",
          "name": "airbyte-bootloader-container",
          "resources": {
            "limits": {},
            "requests": {},
          },
          "securityContext": {
            "allowPrivilegeEscalation": false,
            "capabilities": {
              "drop": [
                "ALL",
              ],
            },
            "readOnlyRootFilesystem": false,
            "runAsGroup": 1000,
            "runAsNonRoot": true,
            "runAsUser": 1000,
            "seccompProfile": {
              "type": "RuntimeDefault",
            },
          },
        },
      ],
      "restartPolicy": "Never",
      "securityContext": {
        "fsGroup": 1000,
      },
      "serviceAccountName": "airbyte-admin",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install, post-upgrade",
        "helm.sh/hook-delete-policy": "hook-succeeded, before-hook-creation",
      },
      "name": "airbyte-minio-create-bucket",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "containers": [
        {
          "command": [
            "/bin/sh",
            "-c",
            "until (/usr/bin/mc config host add myminio $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY) do echo '...waiting...' && sleep 1; done; /usr/bin/mc mb --ignore-existing myminio/state-storage; /usr/bin/mc policy set public myminio/state-storage; /usr/bin/mc mb --ignore-existing myminio/airbyte-dev-logs; /usr/bin/mc policy set public myminio/airbyte-dev-logs;",
          ],
          "env": [
            {
              "name": "MINIO_ACCESS_KEY",
              "valueFrom": {
                "secretKeyRef": {
                  "key": "DEFAULT_MINIO_ACCESS_KEY",
                  "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                },
              },
            },
            {
              "name": "MINIO_SECRET_KEY",
              "valueFrom": {
                "secretKeyRef": {
                  "key": "DEFAULT_MINIO_SECRET_KEY",
                  "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                },
              },
            },
            {
              "name": "MINIO_ENDPOINT",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "MINIO_ENDPOINT",
                  "name": "melt-airbyte-helm-c8097189-airbyte-env",
                },
              },
            },
          ],
          "image": "airbyte/mc",
          "name": "minio-mc",
          "securityContext": {
            "allowPrivilegeEscalation": false,
            "capabilities": {
              "drop": [
                "ALL",
              ],
            },
            "readOnlyRootFilesystem": false,
            "runAsGroup": 1000,
            "runAsNonRoot": true,
            "runAsUser": 1000,
            "seccompProfile": {
              "type": "RuntimeDefault",
            },
          },
        },
      ],
      "restartPolicy": "OnFailure",
      "securityContext": {
        "fsGroup": 1000,
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "test",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "airbyte",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "melt-airbyte-helm-c8097189-test-connection",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "containers": [
        {
          "args": [
            "melt-airbyte-helm-c8097189-airbyte-webapp-svc:80",
          ],
          "command": [
            "wget",
          ],
          "image": "busybox",
          "name": "wget",
          "resources": {
            "limits": {
              "cpu": "200m",
              "memory": "128Mi",
            },
            "requests": {
              "cpu": "100m",
              "memory": "64Mi",
            },
          },
        },
      ],
      "restartPolicy": "Never",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-1",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-db",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "airbyte-db",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-db",
        },
      },
      "serviceName": "airbyte-db-svc",
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-db",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "POSTGRES_DB",
                  "value": "db-airbyte",
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "value": "airbyte",
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "airbyte",
                },
                {
                  "name": "PGDATA",
                  "value": "/var/lib/postgresql/data/pgdata",
                },
              ],
              "image": "airbyte/db:0.60.1",
              "name": "airbyte-db-container",
              "ports": [
                {
                  "containerPort": 5432,
                },
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 70,
                "runAsNonRoot": true,
                "runAsUser": 70,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/postgresql/data",
                  "name": "airbyte-volume-db",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 70,
          },
        },
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "airbyte-volume-db",
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce",
            ],
            "resources": {
              "requests": {
                "storage": "500Mi",
              },
            },
          },
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-1",
      },
      "labels": {
        "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-minio",
        "app.kubernetes.io/version": "0.60.1",
        "helm.sh/chart": "airbyte-0.86.3",
      },
      "name": "airbyte-minio",
      "namespace": "melt-airbyte-namespace",
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
          "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-minio",
        },
      },
      "serviceName": "airbyte-minio-svc",
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "melt-airbyte-helm-c8097189",
            "app.kubernetes.io/name": "melt-airbyte-helm-c8097189-minio",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "server",
                "/storage",
              ],
              "env": [
                {
                  "name": "MINIO_ROOT_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DEFAULT_MINIO_ACCESS_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
                {
                  "name": "MINIO_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DEFAULT_MINIO_SECRET_KEY",
                      "name": "melt-airbyte-helm-c8097189-airbyte-secrets",
                    },
                  },
                },
              ],
              "image": "minio/minio:RELEASE.2023-11-20T22-40-07Z",
              "name": "airbyte-minio",
              "ports": [
                {
                  "containerPort": 9000,
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "64Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/storage",
                  "name": "airbyte-minio-pv-claim",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1000,
          },
        },
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "airbyte-minio-pv-claim",
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce",
            ],
            "resources": {
              "requests": {
                "storage": "500Mi",
              },
            },
          },
        },
      ],
    },
  },
]
`;

exports[`Synthesis argoWorkflows 1`] = `
[
  {
    "apiVersion": "v1",
    "automountServiceAccountToken": true,
    "kind": "ServiceAccount",
    "metadata": {
      "name": "melt-argo-executor-service-account-c853ed23",
      "namespace": "melt-argo",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubernetes.io/service-account.name": "melt-argo-executor-service-account-c853ed23",
      },
      "name": "melt-argo-executor-service-account-c853ed23.service-account-token",
      "namespace": "melt-argo",
    },
    "type": "kubernetes.io/service-account-token",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
      "namespace": "melt-argo",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server",
      "namespace": "melt-argo",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "nodeEvents:
  enabled: true
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-cm",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller-conf",
      "namespace": "melt-argo",
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "clusterworkflowtemplates.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "ClusterWorkflowTemplate",
        "listKind": "ClusterWorkflowTemplateList",
        "plural": "clusterworkflowtemplates",
        "shortNames": [
          "clusterwftmpl",
          "cwft",
        ],
        "singular": "clusterworkflowtemplate",
      },
      "scope": "Cluster",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "cronworkflows.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "CronWorkflow",
        "listKind": "CronWorkflowList",
        "plural": "cronworkflows",
        "shortNames": [
          "cwf",
          "cronwf",
        ],
        "singular": "cronworkflow",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
                "status": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "workflowartifactgctasks.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "WorkflowArtifactGCTask",
        "listKind": "WorkflowArtifactGCTaskList",
        "plural": "workflowartifactgctasks",
        "shortNames": [
          "wfat",
        ],
        "singular": "workflowartifactgctask",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
                "status": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
          "subresources": {
            "status": {},
          },
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "workfloweventbindings.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "WorkflowEventBinding",
        "listKind": "WorkflowEventBindingList",
        "plural": "workfloweventbindings",
        "shortNames": [
          "wfeb",
        ],
        "singular": "workfloweventbinding",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "workflows.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "Workflow",
        "listKind": "WorkflowList",
        "plural": "workflows",
        "shortNames": [
          "wf",
        ],
        "singular": "workflow",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "additionalPrinterColumns": [
            {
              "description": "Status of the workflow",
              "jsonPath": ".status.phase",
              "name": "Status",
              "type": "string",
            },
            {
              "description": "When the workflow was started",
              "format": "date-time",
              "jsonPath": ".status.startedAt",
              "name": "Age",
              "type": "date",
            },
            {
              "description": "Human readable message indicating details about why the workflow is in this condition.",
              "jsonPath": ".status.message",
              "name": "Message",
              "type": "string",
            },
          ],
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
                "status": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
          "subresources": {},
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "workflowtaskresults.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "WorkflowTaskResult",
        "listKind": "WorkflowTaskResultList",
        "plural": "workflowtaskresults",
        "singular": "workflowtaskresult",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "message": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "outputs": {
                  "properties": {
                    "artifacts": {
                      "items": {
                        "properties": {
                          "archive": {
                            "properties": {
                              "none": {
                                "type": "object",
                              },
                              "tar": {
                                "properties": {
                                  "compressionLevel": {
                                    "format": "int32",
                                    "type": "integer",
                                  },
                                },
                                "type": "object",
                              },
                              "zip": {
                                "type": "object",
                              },
                            },
                            "type": "object",
                          },
                          "archiveLogs": {
                            "type": "boolean",
                          },
                          "artifactGC": {
                            "properties": {
                              "podMetadata": {
                                "properties": {
                                  "annotations": {
                                    "additionalProperties": {
                                      "type": "string",
                                    },
                                    "type": "object",
                                  },
                                  "labels": {
                                    "additionalProperties": {
                                      "type": "string",
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                              "serviceAccountName": {
                                "type": "string",
                              },
                              "strategy": {
                                "enum": [
                                  "",
                                  "OnWorkflowCompletion",
                                  "OnWorkflowDeletion",
                                  "Never",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "artifactory": {
                            "properties": {
                              "passwordSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "url": {
                                "type": "string",
                              },
                              "usernameSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                            },
                            "required": [
                              "url",
                            ],
                            "type": "object",
                          },
                          "azure": {
                            "properties": {
                              "accountKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "blob": {
                                "type": "string",
                              },
                              "container": {
                                "type": "string",
                              },
                              "endpoint": {
                                "type": "string",
                              },
                              "useSDKCreds": {
                                "type": "boolean",
                              },
                            },
                            "required": [
                              "blob",
                              "container",
                              "endpoint",
                            ],
                            "type": "object",
                          },
                          "deleted": {
                            "type": "boolean",
                          },
                          "from": {
                            "type": "string",
                          },
                          "fromExpression": {
                            "type": "string",
                          },
                          "gcs": {
                            "properties": {
                              "bucket": {
                                "type": "string",
                              },
                              "key": {
                                "type": "string",
                              },
                              "serviceAccountKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                            },
                            "required": [
                              "key",
                            ],
                            "type": "object",
                          },
                          "git": {
                            "properties": {
                              "branch": {
                                "type": "string",
                              },
                              "depth": {
                                "format": "int64",
                                "type": "integer",
                              },
                              "disableSubmodules": {
                                "type": "boolean",
                              },
                              "fetch": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "insecureIgnoreHostKey": {
                                "type": "boolean",
                              },
                              "passwordSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "repo": {
                                "type": "string",
                              },
                              "revision": {
                                "type": "string",
                              },
                              "singleBranch": {
                                "type": "boolean",
                              },
                              "sshPrivateKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "usernameSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                            },
                            "required": [
                              "repo",
                            ],
                            "type": "object",
                          },
                          "globalName": {
                            "type": "string",
                          },
                          "hdfs": {
                            "properties": {
                              "addresses": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "force": {
                                "type": "boolean",
                              },
                              "hdfsUser": {
                                "type": "string",
                              },
                              "krbCCacheSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "krbConfigConfigMap": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "krbKeytabSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "krbRealm": {
                                "type": "string",
                              },
                              "krbServicePrincipalName": {
                                "type": "string",
                              },
                              "krbUsername": {
                                "type": "string",
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "path",
                            ],
                            "type": "object",
                          },
                          "http": {
                            "properties": {
                              "auth": {
                                "properties": {
                                  "basicAuth": {
                                    "properties": {
                                      "passwordSecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                      "usernameSecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "clientCert": {
                                    "properties": {
                                      "clientCertSecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                      "clientKeySecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "oauth2": {
                                    "properties": {
                                      "clientIDSecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                      "clientSecretSecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                      "endpointParams": {
                                        "items": {
                                          "properties": {
                                            "key": {
                                              "type": "string",
                                            },
                                            "value": {
                                              "type": "string",
                                            },
                                          },
                                          "required": [
                                            "key",
                                          ],
                                          "type": "object",
                                        },
                                        "type": "array",
                                      },
                                      "scopes": {
                                        "items": {
                                          "type": "string",
                                        },
                                        "type": "array",
                                      },
                                      "tokenURLSecret": {
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                          },
                                          "name": {
                                            "type": "string",
                                          },
                                          "optional": {
                                            "type": "boolean",
                                          },
                                        },
                                        "required": [
                                          "key",
                                        ],
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                              "headers": {
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                    },
                                    "value": {
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "name",
                                    "value",
                                  ],
                                  "type": "object",
                                },
                                "type": "array",
                              },
                              "url": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "url",
                            ],
                            "type": "object",
                          },
                          "mode": {
                            "format": "int32",
                            "type": "integer",
                          },
                          "name": {
                            "type": "string",
                          },
                          "optional": {
                            "type": "boolean",
                          },
                          "oss": {
                            "properties": {
                              "accessKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "bucket": {
                                "type": "string",
                              },
                              "createBucketIfNotPresent": {
                                "type": "boolean",
                              },
                              "endpoint": {
                                "type": "string",
                              },
                              "key": {
                                "type": "string",
                              },
                              "lifecycleRule": {
                                "properties": {
                                  "markDeletionAfterDays": {
                                    "format": "int32",
                                    "type": "integer",
                                  },
                                  "markInfrequentAccessAfterDays": {
                                    "format": "int32",
                                    "type": "integer",
                                  },
                                },
                                "type": "object",
                              },
                              "secretKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "securityToken": {
                                "type": "string",
                              },
                              "useSDKCreds": {
                                "type": "boolean",
                              },
                            },
                            "required": [
                              "key",
                            ],
                            "type": "object",
                          },
                          "path": {
                            "type": "string",
                          },
                          "raw": {
                            "properties": {
                              "data": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "data",
                            ],
                            "type": "object",
                          },
                          "recurseMode": {
                            "type": "boolean",
                          },
                          "s3": {
                            "properties": {
                              "accessKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "bucket": {
                                "type": "string",
                              },
                              "caSecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "createBucketIfNotPresent": {
                                "properties": {
                                  "objectLocking": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                              "encryptionOptions": {
                                "properties": {
                                  "enableEncryption": {
                                    "type": "boolean",
                                  },
                                  "kmsEncryptionContext": {
                                    "type": "string",
                                  },
                                  "kmsKeyId": {
                                    "type": "string",
                                  },
                                  "serverSideCustomerKeySecret": {
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                      },
                                      "name": {
                                        "type": "string",
                                      },
                                      "optional": {
                                        "type": "boolean",
                                      },
                                    },
                                    "required": [
                                      "key",
                                    ],
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                              "endpoint": {
                                "type": "string",
                              },
                              "insecure": {
                                "type": "boolean",
                              },
                              "key": {
                                "type": "string",
                              },
                              "region": {
                                "type": "string",
                              },
                              "roleARN": {
                                "type": "string",
                              },
                              "secretKeySecret": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "useSDKCreds": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "subPath": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "exitCode": {
                      "type": "string",
                    },
                    "parameters": {
                      "items": {
                        "properties": {
                          "default": {
                            "type": "string",
                          },
                          "description": {
                            "type": "string",
                          },
                          "enum": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "globalName": {
                            "type": "string",
                          },
                          "name": {
                            "type": "string",
                          },
                          "value": {
                            "type": "string",
                          },
                          "valueFrom": {
                            "properties": {
                              "configMapKeyRef": {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                  "optional": {
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "key",
                                ],
                                "type": "object",
                              },
                              "default": {
                                "type": "string",
                              },
                              "event": {
                                "type": "string",
                              },
                              "expression": {
                                "type": "string",
                              },
                              "jqFilter": {
                                "type": "string",
                              },
                              "jsonPath": {
                                "type": "string",
                              },
                              "parameter": {
                                "type": "string",
                              },
                              "path": {
                                "type": "string",
                              },
                              "supplied": {
                                "type": "object",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "result": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "phase": {
                  "type": "string",
                },
                "progress": {
                  "type": "string",
                },
              },
              "required": [
                "metadata",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "workflowtasksets.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "WorkflowTaskSet",
        "listKind": "WorkflowTaskSetList",
        "plural": "workflowtasksets",
        "shortNames": [
          "wfts",
        ],
        "singular": "workflowtaskset",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
                "status": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
          "subresources": {
            "status": {},
          },
        },
      ],
    },
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "workflowtemplates.argoproj.io",
      "namespace": "melt-argo",
    },
    "spec": {
      "group": "argoproj.io",
      "names": {
        "kind": "WorkflowTemplate",
        "listKind": "WorkflowTemplateList",
        "plural": "workflowtemplates",
        "shortNames": [
          "wftmpl",
        ],
        "singular": "workflowtemplate",
      },
      "scope": "Namespaced",
      "versions": [
        {
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "properties": {
                "apiVersion": {
                  "type": "string",
                },
                "kind": {
                  "type": "string",
                },
                "metadata": {
                  "type": "object",
                },
                "spec": {
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "x-kubernetes-preserve-unknown-fields": true,
                },
              },
              "required": [
                "metadata",
                "spec",
              ],
              "type": "object",
            },
          },
          "served": true,
          "storage": true,
        },
      ],
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
        "rbac.authorization.k8s.io/aggregate-to-view": "true",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-view",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflows",
          "workflows/finalizers",
          "workfloweventbindings",
          "workfloweventbindings/finalizers",
          "workflowtemplates",
          "workflowtemplates/finalizers",
          "cronworkflows",
          "cronworkflows/finalizers",
          "clusterworkflowtemplates",
          "clusterworkflowtemplates/finalizers",
          "workflowtasksets",
          "workflowtasksets/finalizers",
          "workflowtaskresults",
          "workflowtaskresults/finalizers",
          "workflowartifactgctasks",
          "workflowartifactgctasks/finalizers",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
        "rbac.authorization.k8s.io/aggregate-to-edit": "true",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-edit",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflows",
          "workflows/finalizers",
          "workfloweventbindings",
          "workfloweventbindings/finalizers",
          "workflowtemplates",
          "workflowtemplates/finalizers",
          "cronworkflows",
          "cronworkflows/finalizers",
          "clusterworkflowtemplates",
          "clusterworkflowtemplates/finalizers",
          "workflowtasksets",
          "workflowtasksets/finalizers",
          "workflowtaskresults",
          "workflowtaskresults/finalizers",
          "workflowartifactgctasks",
          "workflowartifactgctasks/finalizers",
        ],
        "verbs": [
          "create",
          "delete",
          "deletecollection",
          "get",
          "list",
          "patch",
          "update",
          "watch",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
        "rbac.authorization.k8s.io/aggregate-to-admin": "true",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-admin",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflows",
          "workflows/finalizers",
          "workfloweventbindings",
          "workfloweventbindings/finalizers",
          "workflowtemplates",
          "workflowtemplates/finalizers",
          "cronworkflows",
          "cronworkflows/finalizers",
          "clusterworkflowtemplates",
          "clusterworkflowtemplates/finalizers",
          "workflowtasksets",
          "workflowtasksets/finalizers",
          "workflowtaskresults",
          "workflowtaskresults/finalizers",
          "workflowartifactgctasks",
          "workflowartifactgctasks/finalizers",
        ],
        "verbs": [
          "create",
          "delete",
          "deletecollection",
          "get",
          "list",
          "patch",
          "update",
          "watch",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller-cluster-template",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "clusterworkflowtemplates",
          "clusterworkflowtemplates/finalizers",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server-cluster-template",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "clusterworkflowtemplates",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update",
          "patch",
          "delete",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller-cluster-template",
      "namespace": "melt-argo",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller-cluster-template",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
        "namespace": "melt-argo",
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server-cluster-template",
      "namespace": "melt-argo",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "melt-argo-helm-c850adad-argo-workflows-server-cluster-template",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "melt-argo-helm-c850adad-argo-workflows-server",
        "namespace": "melt-argo",
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods",
        ],
        "verbs": [
          "create",
          "get",
          "list",
          "watch",
          "update",
          "patch",
          "delete",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods/exec",
        ],
        "verbs": [
          "create",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "configmaps",
        ],
        "verbs": [
          "get",
          "watch",
          "list",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "persistentvolumeclaims",
          "persistentvolumeclaims/finalizers",
        ],
        "verbs": [
          "create",
          "update",
          "delete",
          "get",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflows",
          "workflows/finalizers",
          "workflowtasksets",
          "workflowtasksets/finalizers",
          "workflowartifactgctasks",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "update",
          "patch",
          "delete",
          "create",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflowtemplates",
          "workflowtemplates/finalizers",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflowtaskresults",
          "workflowtaskresults/finalizers",
        ],
        "verbs": [
          "list",
          "watch",
          "deletecollection",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "cronworkflows",
          "cronworkflows/finalizers",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "update",
          "patch",
          "delete",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "events",
        ],
        "verbs": [
          "create",
          "patch",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "serviceaccounts",
        ],
        "verbs": [
          "get",
          "list",
        ],
      },
      {
        "apiGroups": [
          "policy",
        ],
        "resources": [
          "poddisruptionbudgets",
        ],
        "verbs": [
          "create",
          "get",
          "delete",
        ],
      },
      {
        "apiGroups": [
          "coordination.k8s.io",
        ],
        "resources": [
          "leases",
        ],
        "verbs": [
          "create",
        ],
      },
      {
        "apiGroups": [
          "coordination.k8s.io",
        ],
        "resourceNames": [
          "workflow-controller",
          "workflow-controller-lease",
        ],
        "resources": [
          "leases",
        ],
        "verbs": [
          "get",
          "watch",
          "update",
          "patch",
          "delete",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resourceNames": [
          "argo-workflows-agent-ca-certificates",
        ],
        "resources": [
          "secrets",
        ],
        "verbs": [
          "get",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods",
        ],
        "verbs": [
          "get",
          "watch",
          "patch",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods/log",
        ],
        "verbs": [
          "get",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods/exec",
        ],
        "verbs": [
          "create",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflowtaskresults",
        ],
        "verbs": [
          "create",
          "patch",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflowtasksets",
          "workflowartifactgctasks",
        ],
        "verbs": [
          "list",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflowtasksets/status",
          "workflowartifactgctasks/status",
        ],
        "verbs": [
          "patch",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "configmaps",
          "events",
        ],
        "verbs": [
          "get",
          "watch",
          "list",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "delete",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "pods/log",
        ],
        "verbs": [
          "get",
          "list",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "secrets",
        ],
        "verbs": [
          "get",
        ],
      },
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "events",
        ],
        "verbs": [
          "watch",
          "create",
          "patch",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "eventsources",
          "sensors",
          "workflows",
          "workfloweventbindings",
          "workflowtemplates",
          "cronworkflows",
        ],
        "verbs": [
          "create",
          "get",
          "list",
          "watch",
          "update",
          "patch",
          "delete",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
      "namespace": "melt-argo",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
        "namespace": "melt-argo",
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow",
      "namespace": "melt-argo",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "melt-argo-executor-service-account-c853ed23",
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server",
      "namespace": "melt-argo",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "melt-argo-helm-c850adad-argo-workflows-server",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "melt-argo-helm-c850adad-argo-workflows-server",
        "namespace": "melt-argo",
      },
    ],
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "app.kubernetes.io/version": "v3.5.6",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server",
      "namespace": "melt-argo",
    },
    "spec": {
      "ports": [
        {
          "port": 2746,
          "targetPort": 2746,
        },
      ],
      "selector": {
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/name": "argo-workflows-server",
      },
      "sessionAffinity": "None",
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "workflow-controller",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        "app.kubernetes.io/part-of": "argo-workflows",
        "app.kubernetes.io/version": "v3.5.6",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
      "namespace": "melt-argo",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 10,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
          "app.kubernetes.io/name": "argo-workflows-workflow-controller",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "workflow-controller",
            "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-workflows-workflow-controller",
            "app.kubernetes.io/part-of": "argo-workflows",
            "app.kubernetes.io/version": "v3.5.6",
            "helm.sh/chart": "argo-workflows-0.41.6",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--configmap",
                "melt-argo-helm-c850adad-argo-workflows-workflow-controller-conf",
                "--executor-image",
                "quay.io/argoproj/argoexec:v3.5.6",
                "--loglevel",
                "info",
                "--gloglevel",
                "0",
                "--log-format",
                "text",
                "--namespaced",
              ],
              "command": [
                "workflow-controller",
              ],
              "env": [
                {
                  "name": "ARGO_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "LEADER_ELECTION_IDENTITY",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "LEADER_ELECTION_DISABLE",
                  "value": "true",
                },
              ],
              "image": "quay.io/argoproj/workflow-controller:v3.5.6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 6060,
                },
                "initialDelaySeconds": 90,
                "periodSeconds": 60,
                "timeoutSeconds": 30,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 9090,
                  "name": "metrics",
                },
                {
                  "containerPort": 6060,
                },
              ],
              "resources": {},
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
              },
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "melt-argo-helm-c850adad-argo-workflows-workflow-controller",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "server",
        "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "argo-workflows-server",
        "app.kubernetes.io/part-of": "argo-workflows",
        "app.kubernetes.io/version": "v3.5.6",
        "helm.sh/chart": "argo-workflows-0.41.6",
      },
      "name": "melt-argo-helm-c850adad-argo-workflows-server",
      "namespace": "melt-argo",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 10,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
          "app.kubernetes.io/name": "argo-workflows-server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "melt-argo-helm-c850adad",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-workflows-server",
            "app.kubernetes.io/part-of": "argo-workflows",
            "app.kubernetes.io/version": "v3.5.6",
            "helm.sh/chart": "argo-workflows-0.41.6",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "server",
                "--configmap=melt-argo-helm-c850adad-argo-workflows-workflow-controller-conf",
                "--secure=false",
                "--namespaced",
                "--loglevel",
                "info",
                "--gloglevel",
                "0",
                "--log-format",
                "text",
              ],
              "env": [
                {
                  "name": "IN_CLUSTER",
                  "value": "true",
                },
                {
                  "name": "ARGO_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "BASE_HREF",
                  "value": "/",
                },
              ],
              "image": "quay.io/argoproj/argocli:v3.5.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "argo-server",
              "ports": [
                {
                  "containerPort": 2746,
                  "name": "web",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": 2746,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 20,
              },
              "resources": {},
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
              },
              "volumeMounts": [
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "melt-argo-helm-c850adad-argo-workflows-server",
          "volumes": [
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "WorkflowTemplate",
    "metadata": {
      "name": "melt-argo-check-postgres-is-ready-c89c327c",
      "namespace": "melt-argo",
    },
    "spec": {
      "templates": [
        {
          "container": {
            "args": [
              "--dbname",
              "{{inputs.parameters.database}}",
              "--host",
              "{{inputs.parameters.hostname}}",
              "--port",
              "{{inputs.parameters.port}}",
              "--username",
              "{{inputs.parameters.username}}",
            ],
            "command": [
              "pg_isready",
            ],
            "env": [
              {
                "name": "PGPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "{{inputs.parameters.passwordSecretKey}}",
                    "name": "{{inputs.parameters.passwordSecret}}",
                  },
                },
              },
            ],
            "image": "postgres:16.3",
          },
          "inputs": {
            "parameters": [
              {
                "name": "database",
              },
              {
                "name": "hostname",
              },
              {
                "name": "passwordSecret",
              },
              {
                "name": "passwordSecretKey",
              },
              {
                "name": "port",
              },
              {
                "name": "username",
              },
              {
                "name": "retryBackoffDuration",
                "value": "60s",
              },
              {
                "name": "retryBackoffFactor",
                "value": "2",
              },
              {
                "name": "retryLimit",
                "value": "3",
              },
            ],
          },
          "name": "check-postgres-is-ready",
          "retryStrategy": {
            "backoff": {
              "duration": "{{inputs.parameters.retryBackoffDuration}}",
              "factor": "{{inputs.parameters.retryBackoffFactor}}",
            },
            "limit": "{{inputs.parameters.retryLimit}}",
          },
          "serviceAccountName": "melt-argo-executor-service-account-c853ed23",
        },
      ],
    },
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "WorkflowTemplate",
    "metadata": {
      "name": "melt-argo-make-simple-http-get-request-c81684fa",
      "namespace": "melt-argo",
    },
    "spec": {
      "templates": [
        {
          "http": {
            "method": "GET",
            "successCondition": "{{inputs.parameters.successCondition}}",
            "url": "{{inputs.parameters.url}}",
          },
          "inputs": {
            "parameters": [
              {
                "name": "url",
              },
              {
                "name": "retryBackoffDuration",
                "value": "60s",
              },
              {
                "name": "retryBackoffFactor",
                "value": "2",
              },
              {
                "name": "retryBackoffMaxDuration",
                "value": "10m",
              },
              {
                "name": "retryLimit",
                "value": "3",
              },
              {
                "name": "successCondition",
                "value": "response.statusCode == 200",
              },
            ],
          },
          "name": "simple-http-get-request",
          "retryStrategy": {
            "backoff": {
              "duration": "{{inputs.parameters.retryBackoffDuration}}",
              "factor": "{{inputs.parameters.retryBackoffFactor}}",
              "maxDuration": "{{inputs.parameters.retryBackoffMaxDuration}}",
            },
            "limit": "{{inputs.parameters.retryLimit}}",
          },
          "serviceAccountName": "melt-argo-executor-service-account-c853ed23",
        },
      ],
    },
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "WorkflowTemplate",
    "metadata": {
      "name": "melt-argo-make-json-http-post-request-c836371c",
      "namespace": "melt-argo",
    },
    "spec": {
      "templates": [
        {
          "inputs": {
            "parameters": [
              {
                "name": "url",
              },
              {
                "name": "requestBody",
              },
              {
                "name": "successCondition",
                "value": "response.statusCode == 200",
              },
            ],
          },
          "name": "json-http-post-request",
          "script": {
            "command": [
              "sh",
            ],
            "env": [
              {
                "name": "BODY",
                "value": "{{inputs.parameters.requestBody}}",
              },
              {
                "name": "URL",
                "value": "{{inputs.parameters.url}}",
              },
            ],
            "image": "curlimages/curl:8.8.0",
            "source": "curl --fail --show-error --silent --location --json "$BODY" "$URL"",
          },
          "serviceAccountName": "melt-argo-executor-service-account-c853ed23",
        },
      ],
    },
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "CronWorkflow",
    "metadata": {
      "name": "melt-argo-elt-workflow-c80aa651",
      "namespace": "melt-argo",
    },
    "spec": {
      "concurrencyPolicy": "Forbid",
      "schedule": "0 */2 * * *",
      "timezone": "UTC",
      "workflowSpec": {
        "entrypoint": "main",
        "serviceAccountName": "melt-argo-executor-service-account-c853ed23",
        "templates": [
          {
            "dag": {
              "tasks": [
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "database",
                        "value": "{{inputs.parameters.postgresDatabase}}",
                      },
                      {
                        "name": "hostname",
                        "value": "{{inputs.parameters.postgresHostname}}",
                      },
                      {
                        "name": "passwordSecret",
                        "value": "{{inputs.parameters.postgresPasswordSecret}}",
                      },
                      {
                        "name": "passwordSecretKey",
                        "value": "{{inputs.parameters.postgresPasswordSecretKey}}",
                      },
                      {
                        "name": "port",
                        "value": "{{inputs.parameters.postgresPort}}",
                      },
                      {
                        "name": "username",
                        "value": "{{inputs.parameters.postgresUsername}}",
                      },
                    ],
                  },
                  "name": "ensure-postgres-is-ready",
                  "templateRef": {
                    "name": "melt-argo-check-postgres-is-ready-c89c327c",
                    "template": "check-postgres-is-ready",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "url",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/health",
                      },
                    ],
                  },
                  "name": "ensure-airbyte-is-ready",
                  "templateRef": {
                    "name": "melt-argo-make-simple-http-get-request-c81684fa",
                    "template": "simple-http-get-request",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "urlToGet",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/workspaces",
                      },
                      {
                        "name": "getResponseCheckPath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbyteWorkspaceName}}"}}]",
                      },
                      {
                        "name": "getResponseReturnValuePath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbyteWorkspaceName}}"}},"0","workspaceId"]",
                      },
                      {
                        "name": "getResponseFailedValue",
                        "value": "[]",
                      },
                      {
                        "name": "urlToPost",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/workspaces",
                      },
                      {
                        "name": "payloadToPost",
                        "value": "{"name":"{{inputs.parameters.airbyteWorkspaceName}}"}",
                      },
                      {
                        "name": "postResponseReturnValuePath",
                        "value": "["workspaceId"]",
                      },
                    ],
                  },
                  "dependencies": [
                    "ensure-airbyte-is-ready",
                  ],
                  "name": "define-airbyte-workspace",
                  "templateRef": {
                    "name": "melt-arg-check-http-get-json-or-http-post-json-c8204b0f",
                    "template": "check-http-get-json-or-http-post-json",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "urlToGet",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/sources",
                      },
                      {
                        "name": "getResponseCheckPath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbyteFakerSourceName}}"}}]",
                      },
                      {
                        "name": "getResponseReturnValuePath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbyteFakerSourceName}}"}},"0","sourceId"]",
                      },
                      {
                        "name": "getResponseFailedValue",
                        "value": "[]",
                      },
                      {
                        "name": "urlToPost",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/sources",
                      },
                      {
                        "name": "payloadToPost",
                        "value": "{
                            "name": "{{inputs.parameters.airbyteFakerSourceName}}",
                            "workspaceId": "{{=tasks['define-airbyte-workspace'].outputs.result}}",
                            "configuration": {
                              "sourceType": "faker",
                              "count": {{inputs.parameters.airbyteFakerSourceCount}}
                            }
                          }",
                      },
                      {
                        "name": "postResponseReturnValuePath",
                        "value": "["sourceId"]",
                      },
                    ],
                  },
                  "dependencies": [
                    "define-airbyte-workspace",
                  ],
                  "name": "define-faker-source",
                  "templateRef": {
                    "name": "melt-arg-check-http-get-json-or-http-post-json-c8204b0f",
                    "template": "check-http-get-json-or-http-post-json",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "urlToGet",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/destinations",
                      },
                      {
                        "name": "getResponseCheckPath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbytePostgresDestinationName}}"}}]",
                      },
                      {
                        "name": "getResponseReturnValuePath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbytePostgresDestinationName}}"}},"0","destinationId"]",
                      },
                      {
                        "name": "getResponseFailedValue",
                        "value": "[]",
                      },
                      {
                        "name": "urlToPost",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/destinations",
                      },
                      {
                        "name": "payloadToPost",
                        "value": "{
                            "name": "{{inputs.parameters.airbytePostgresDestinationName}}",
                            "workspaceId": "{{=tasks['define-airbyte-workspace'].outputs.result}}",
                            "configuration": {
                              "destinationType": "postgres",
                              "ssl_mode": { "mode": "{{inputs.parameters.airbytePostgresDestinationSslMode}}" },
                              "database": "{{inputs.parameters.postgresDatabase}}",
                              "schema": "{{inputs.parameters.postgresDefaultSchema}}",
                              "host": "{{inputs.parameters.postgresHostname}}",
                              "port": {{inputs.parameters.postgresPort}},
                              "username": "{{inputs.parameters.postgresUsername}}",
                              "password": null
                            }
                          }",
                      },
                      {
                        "name": "patchPathForPayloadToPost",
                        "value": "["configuration","password"]",
                      },
                      {
                        "name": "patchValueSecretForPayloadToPost",
                        "value": "{{inputs.parameters.postgresPasswordSecret}}",
                      },
                      {
                        "name": "patchValueSecretKeyForPayloadToPost",
                        "value": "{{inputs.parameters.postgresPasswordSecretKey}}",
                      },
                      {
                        "name": "postResponseReturnValuePath",
                        "value": "["destinationId"]",
                      },
                    ],
                  },
                  "dependencies": [
                    "ensure-postgres-is-ready",
                    "define-airbyte-workspace",
                  ],
                  "name": "define-postgres-destination",
                  "templateRef": {
                    "name": "check-http-get-json-or-http-post-json-with-pat-c88d0a25",
                    "template": "check-http-get-json-or-http-post-json-with-patched-secrets",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "urlToGet",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/connections?workspaceIds={{=tasks['define-airbyte-workspace'].outputs.result}}",
                      },
                      {
                        "name": "getResponseCheckPath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbyteFakerToPostgresConnectionName}}"}}]",
                      },
                      {
                        "name": "getResponseReturnValuePath",
                        "value": "["data",{"filterByKey":{"key":"name","value":"{{inputs.parameters.airbyteFakerToPostgresConnectionName}}"}},"0","connectionId"]",
                      },
                      {
                        "name": "getResponseFailedValue",
                        "value": "[]",
                      },
                      {
                        "name": "urlToPost",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/connections",
                      },
                      {
                        "name": "payloadToPost",
                        "value": "{"name":"{{inputs.parameters.airbyteFakerToPostgresConnectionName}}","sourceId":"{{=tasks['define-faker-source'].outputs.result}}","destinationId":"{{=tasks['define-postgres-destination'].outputs.result}}","namespaceDefinition":"custom_format","namespaceFormat":"{{inputs.parameters.airbyteFakerToPostgresDestinationSchema}}"}",
                      },
                      {
                        "name": "postResponseReturnValuePath",
                        "value": "["connectionId"]",
                      },
                    ],
                  },
                  "dependencies": [
                    "define-faker-source",
                    "define-postgres-destination",
                  ],
                  "name": "define-faker-to-postgres-connection",
                  "templateRef": {
                    "name": "melt-arg-check-http-get-json-or-http-post-json-c8204b0f",
                    "template": "check-http-get-json-or-http-post-json",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "url",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/jobs",
                      },
                      {
                        "name": "requestBody",
                        "value": "{"connectionId":"{{=tasks['define-faker-to-postgres-connection'].outputs.result}}","jobType":"sync"}",
                      },
                    ],
                  },
                  "dependencies": [
                    "define-faker-to-postgres-connection",
                  ],
                  "name": "start-load",
                  "templateRef": {
                    "name": "melt-argo-make-json-http-post-request-c836371c",
                    "template": "json-http-post-request",
                  },
                },
                {
                  "arguments": {
                    "parameters": [
                      {
                        "name": "url",
                        "value": "{{inputs.parameters.airbyteApiServerBaseUrl}}/v1/jobs/{{=jsonpath(tasks['start-load'].outputs.result, '$.jobId')}}",
                      },
                      {
                        "name": "successCondition",
                        "value": "response.body contains "succeeded"",
                      },
                      {
                        "name": "retryLimit",
                        "value": "{{inputs.parameters.airbyteFakerToPostgresJobRetryLimit}}",
                      },
                    ],
                  },
                  "dependencies": [
                    "start-load",
                  ],
                  "name": "wait-for-load",
                  "templateRef": {
                    "name": "melt-argo-make-simple-http-get-request-c81684fa",
                    "template": "simple-http-get-request",
                  },
                },
              ],
            },
            "inputs": {
              "parameters": [
                {
                  "name": "airbyteApiServerBaseUrl",
                  "value": "http://melt-airbyte-helm-c8097189-airbyte-api-server-svc.melt-airbyte-namespace.svc.cluster.local",
                },
                {
                  "name": "airbyteWorkspaceName",
                  "value": "melt",
                },
                {
                  "name": "airbyteFakerSourceCount",
                  "value": "1000",
                },
                {
                  "name": "airbyteFakerSourceName",
                  "value": "faker",
                },
                {
                  "name": "airbyteFakerToPostgresConnectionName",
                  "value": "faker-to-postgres",
                },
                {
                  "name": "airbyteFakerToPostgresDestinationSchema",
                  "value": "faker",
                },
                {
                  "name": "airbyteFakerToPostgresJobRetryLimit",
                  "value": "10",
                },
                {
                  "name": "airbytePostgresDestinationName",
                  "value": "postgres",
                },
                {
                  "name": "airbytePostgresDestinationSslMode",
                  "value": "prefer",
                },
                {
                  "name": "postgresDatabase",
                  "value": "database",
                },
                {
                  "name": "postgresDefaultSchema",
                  "value": "public",
                },
                {
                  "name": "postgresHostname",
                  "value": "melt-postgres-helm-c816cbd0-postgresql.melt-postgres-namespace.svc.cluster.local",
                },
                {
                  "name": "postgresPasswordSecret",
                  "value": "melt-postgres-secret",
                },
                {
                  "name": "postgresPasswordSecretKey",
                  "value": "meltPassword",
                },
                {
                  "name": "postgresPort",
                  "value": "5432",
                },
                {
                  "name": "postgresUsername",
                  "value": "melt",
                },
              ],
            },
            "name": "main",
          },
        ],
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "melt-postgres-secret",
      "namespace": "melt-argo",
    },
    "stringData": {
      "adminPassword": "admin-password",
      "meltPassword": "melt-password",
    },
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "WorkflowTemplate",
    "metadata": {
      "name": "melt-arg-check-http-get-json-or-http-post-json-c8204b0f",
      "namespace": "melt-argo",
    },
    "spec": {
      "templates": [
        {
          "inputs": {
            "parameters": [
              {
                "name": "urlToGet",
              },
              {
                "name": "getResponseCheckPath",
              },
              {
                "name": "getResponseFailedValue",
              },
              {
                "name": "getResponseReturnValuePath",
              },
              {
                "name": "urlToPost",
              },
              {
                "name": "payloadToPost",
              },
              {
                "name": "postResponseReturnValuePath",
              },
            ],
          },
          "name": "check-http-get-json-or-http-post-json",
          "script": {
            "command": [
              "python",
            ],
            "env": [
              {
                "name": "URL_TO_GET",
                "value": "{{inputs.parameters.urlToGet}}",
              },
              {
                "name": "GET_RESPONSE_CHECK_PATH",
                "value": "{{inputs.parameters.getResponseCheckPath}}",
              },
              {
                "name": "GET_RESPONSE_FAILED_VALUE",
                "value": "{{inputs.parameters.getResponseFailedValue}}",
              },
              {
                "name": "GET_RESPONSE_RETURN_VALUE_PATH",
                "value": "{{inputs.parameters.getResponseReturnValuePath}}",
              },
              {
                "name": "URL_TO_POST",
                "value": "{{inputs.parameters.urlToPost}}",
              },
              {
                "name": "PAYLOAD_TO_POST",
                "value": "{{inputs.parameters.payloadToPost}}",
              },
              {
                "name": "POST_RESPONSE_RETURN_VALUE_PATH",
                "value": "{{inputs.parameters.postResponseReturnValuePath}}",
              },
            ],
            "image": "python:3.12.3-slim-bookworm",
            "source": "#!/usr/bin/env python3.12


import json
import os
import sys
from argparse import Action, ArgumentParser, Namespace
from json import JSONDecodeError
from typing import Any, Optional, TypedDict
from urllib import request
from urllib.request import Request

Json = dict[str, "Json"] | list["Json"] | bool | int | float | str | None


class ArgumentParserWithEnvVarDefault(ArgumentParser):
    def add_argument(
        self, *names_or_flags: str, envvar: Optional[str] = None, **kwargs: Any
    ) -> Action:
        if envvar is not None and (value := os.getenv(envvar)) is not None:
            kwargs |= {"required": False, "default": value}
            return super().add_argument(*names_or_flags, **kwargs)
        else:
            return super().add_argument(*names_or_flags, **kwargs)


def try_loads(s: str) -> Json:
    try:
        return json.loads(s)
    except JSONDecodeError:
        return s


def parse_args(args: list[str]) -> Namespace:
    parser = ArgumentParserWithEnvVarDefault()
    parser.add_argument(
        "--url-to-get",
        envvar="URL_TO_GET",
        required=True,
        help="URL to make initial GET request to",
    )
    parser.add_argument(
        "--get-response-check-path",
        envvar="GET_RESPONSE_CHECK_PATH",
        default=[],
        type=json.loads,
        help="Path to grab value from in response to initial GET request to determine if failed",
    )
    parser.add_argument(
        "--get-response-failed-value",
        envvar="GET_RESPONSE_FAILED_VALUE",
        required=True,
        type=try_loads,
        help="Value to check at GET_RESPONSE_CHECK_PATH to determine if response indicates failure",
    )
    parser.add_argument(
        "--get-response-return-value-path",
        envvar="GET_RESPONSE_RETURN_VALUE_PATH",
        required=True,
        type=json.loads,
        help="Path to grab value from in initial GET response if deemed successful",
    )
    parser.add_argument(
        "--url-to-post",
        envvar="URL_TO_POST",
        required=True,
        help="URL to make subsequent POST request to should GET request be deemed a failure",
    )
    parser.add_argument(
        "--payload-to-post",
        envvar="PAYLOAD_TO_POST",
        required=True,
        type=try_loads,
        help="Data to include in subsequent POST request should GET request be deemed a failure",
    )
    parser.add_argument(
        "--patch-path-for-payload-to-post",
        envvar="PATCH_PATH_FOR_PAYLOAD_TO_POST",
        type=json.loads,
        help="Path to place PATCH_PATH_FOR_PAYLOAD_TO_POST at in PAYLOAD_TO_POST",
    )
    parser.add_argument(
        "--patch-value-for-payload-to-post",
        envvar="PATCH_VALUE_FOR_PAYLOAD_TO_POST",
        type=try_loads,
        help="Value to patch into PAYLOAD_TO_POST at PATCH_PATH_FOR_PAYLOAD_TO_POST",
    )
    parser.add_argument(
        "--post-response-return-value-path",
        envvar="POST_RESPONSE_RETURN_VALUE_PATH",
        default=[],
        type=json.loads,
        help="Path to grab value from subsequent POST response should GET request be deemed a failure",
    )

    return parser.parse_args(args)


def get(url: str) -> Json:
    with request.urlopen(
        Request(
            url=url,
            headers={"Accepts": "application/json"},
        )
    ) as response:
        return json.load(response)


def post(url: str, data: bytes) -> Json:
    with request.urlopen(
        Request(
            method="POST",
            url=url,
            headers={
                "Content-Type": "application/json",
                "Accepts": "application/json",
            },
            data=data,
        )
    ) as response:
        return json.load(response)


class DigFilterByKeySpec(TypedDict):
    key: str
    value: Json


class DigFilterByKey(TypedDict):
    filterByKey: DigFilterByKeySpec


class DigError(Exception): ...


def dig(j: Json, path: list[str | DigFilterByKey]) -> Json:
    match (j, path):
        case (dict(), [p, *ps]):
            match p:
                case str():
                    return dig(j[p], ps)
                case _:
                    raise DigError("Unexpected %s received at %s", p, j)
        case (list(), [p, *ps]):
            match p:
                case "*":
                    return [dig(element, ps) for element in j]
                case str():
                    return dig(j[int(p)], ps)
                case _:
                    filter_by_key = p["filterByKey"]
                    filtered: Json = [
                        element
                        for element in j
                        if isinstance(element, dict)
                        and element.get(filter_by_key["key"]) == filter_by_key["value"]
                    ]
                    return dig(filtered, ps)
        case (_, []):
            return j
        case _:
            raise DigError("Non-empty path (%s) for (%s)", path, j)


def patch(j: Json, value: Json, path: list[str]) -> Json:
    match (j, value, path):
        # case: \`j\` is a \`dict\` and \`path\` is non-empty
        case (dict(), _, [p, *ps]):
            return j | {p: patch(j[p], value, ps)}
        # case: \`j\` is a \`list\` and \`path\` is non-empty
        case (list(), _, [p, *ps]):
            if p == "*":
                return [patch(element, value, ps) for element in j]
            else:
                index = int(p)
                return j[:index] + [patch(j[index], value, ps)] + j[index + 1 :]
        # case: \`path\` is empty (i.e., the data structure to patch has been reached)
        case (_, _, []):
            return value
        # case: \`path\` is non-empty and \`j\` is of a non-"container" type
        case _:
            return j


def main():
    args = parse_args(sys.argv[1:])

    def _post():
        payload: Json = args.payload_to_post

        if args.patch_path_for_payload_to_post is not None:
            payload = patch(
                args.payload_to_post,
                value=args.patch_value_for_payload_to_post,
                path=args.patch_path_for_payload_to_post,
            )

        response = post(
            url=args.url_to_post,
            data=json.dumps(payload).encode(),
        )
        return dig(response, path=args.post_response_return_value_path)

    result: Json

    try:
        get_response = get(args.url_to_get)
        get_response_value = dig(get_response, path=args.get_response_check_path)
    except (DigError, IndexError, KeyError):
        result = _post()
    else:
        if get_response_value != args.get_response_failed_value:
            result = dig(get_response, path=args.get_response_return_value_path)
        else:
            result = _post()

    if isinstance(result, str):
        print(result)
    else:
        print(json.dumps(result))


if __name__ == "__main__":
    main()
",
          },
          "serviceAccountName": "melt-argo-executor-service-account-c853ed23",
        },
      ],
    },
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "WorkflowTemplate",
    "metadata": {
      "name": "check-http-get-json-or-http-post-json-with-pat-c88d0a25",
      "namespace": "melt-argo",
    },
    "spec": {
      "templates": [
        {
          "inputs": {
            "parameters": [
              {
                "name": "urlToGet",
              },
              {
                "name": "getResponseCheckPath",
              },
              {
                "name": "getResponseFailedValue",
              },
              {
                "name": "getResponseReturnValuePath",
              },
              {
                "name": "urlToPost",
              },
              {
                "name": "payloadToPost",
              },
              {
                "name": "postResponseReturnValuePath",
              },
              {
                "name": "patchPathForPayloadToPost",
              },
              {
                "name": "patchValueSecretForPayloadToPost",
              },
              {
                "name": "patchValueSecretKeyForPayloadToPost",
              },
            ],
          },
          "name": "check-http-get-json-or-http-post-json-with-patched-secrets",
          "script": {
            "command": [
              "python",
            ],
            "env": [
              {
                "name": "URL_TO_GET",
                "value": "{{inputs.parameters.urlToGet}}",
              },
              {
                "name": "GET_RESPONSE_CHECK_PATH",
                "value": "{{inputs.parameters.getResponseCheckPath}}",
              },
              {
                "name": "GET_RESPONSE_FAILED_VALUE",
                "value": "{{inputs.parameters.getResponseFailedValue}}",
              },
              {
                "name": "GET_RESPONSE_RETURN_VALUE_PATH",
                "value": "{{inputs.parameters.getResponseReturnValuePath}}",
              },
              {
                "name": "URL_TO_POST",
                "value": "{{inputs.parameters.urlToPost}}",
              },
              {
                "name": "PAYLOAD_TO_POST",
                "value": "{{inputs.parameters.payloadToPost}}",
              },
              {
                "name": "POST_RESPONSE_RETURN_VALUE_PATH",
                "value": "{{inputs.parameters.postResponseReturnValuePath}}",
              },
              {
                "name": "PATCH_PATH_FOR_PAYLOAD_TO_POST",
                "value": "{{inputs.parameters.patchPathForPayloadToPost}}",
              },
              {
                "name": "PATCH_VALUE_FOR_PAYLOAD_TO_POST",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "{{inputs.parameters.patchValueSecretKeyForPayloadToPost}}",
                    "name": "{{inputs.parameters.patchValueSecretForPayloadToPost}}",
                  },
                },
              },
            ],
            "image": "python:3.12.3-slim-bookworm",
            "source": "#!/usr/bin/env python3.12


import json
import os
import sys
from argparse import Action, ArgumentParser, Namespace
from json import JSONDecodeError
from typing import Any, Optional, TypedDict
from urllib import request
from urllib.request import Request

Json = dict[str, "Json"] | list["Json"] | bool | int | float | str | None


class ArgumentParserWithEnvVarDefault(ArgumentParser):
    def add_argument(
        self, *names_or_flags: str, envvar: Optional[str] = None, **kwargs: Any
    ) -> Action:
        if envvar is not None and (value := os.getenv(envvar)) is not None:
            kwargs |= {"required": False, "default": value}
            return super().add_argument(*names_or_flags, **kwargs)
        else:
            return super().add_argument(*names_or_flags, **kwargs)


def try_loads(s: str) -> Json:
    try:
        return json.loads(s)
    except JSONDecodeError:
        return s


def parse_args(args: list[str]) -> Namespace:
    parser = ArgumentParserWithEnvVarDefault()
    parser.add_argument(
        "--url-to-get",
        envvar="URL_TO_GET",
        required=True,
        help="URL to make initial GET request to",
    )
    parser.add_argument(
        "--get-response-check-path",
        envvar="GET_RESPONSE_CHECK_PATH",
        default=[],
        type=json.loads,
        help="Path to grab value from in response to initial GET request to determine if failed",
    )
    parser.add_argument(
        "--get-response-failed-value",
        envvar="GET_RESPONSE_FAILED_VALUE",
        required=True,
        type=try_loads,
        help="Value to check at GET_RESPONSE_CHECK_PATH to determine if response indicates failure",
    )
    parser.add_argument(
        "--get-response-return-value-path",
        envvar="GET_RESPONSE_RETURN_VALUE_PATH",
        required=True,
        type=json.loads,
        help="Path to grab value from in initial GET response if deemed successful",
    )
    parser.add_argument(
        "--url-to-post",
        envvar="URL_TO_POST",
        required=True,
        help="URL to make subsequent POST request to should GET request be deemed a failure",
    )
    parser.add_argument(
        "--payload-to-post",
        envvar="PAYLOAD_TO_POST",
        required=True,
        type=try_loads,
        help="Data to include in subsequent POST request should GET request be deemed a failure",
    )
    parser.add_argument(
        "--patch-path-for-payload-to-post",
        envvar="PATCH_PATH_FOR_PAYLOAD_TO_POST",
        type=json.loads,
        help="Path to place PATCH_PATH_FOR_PAYLOAD_TO_POST at in PAYLOAD_TO_POST",
    )
    parser.add_argument(
        "--patch-value-for-payload-to-post",
        envvar="PATCH_VALUE_FOR_PAYLOAD_TO_POST",
        type=try_loads,
        help="Value to patch into PAYLOAD_TO_POST at PATCH_PATH_FOR_PAYLOAD_TO_POST",
    )
    parser.add_argument(
        "--post-response-return-value-path",
        envvar="POST_RESPONSE_RETURN_VALUE_PATH",
        default=[],
        type=json.loads,
        help="Path to grab value from subsequent POST response should GET request be deemed a failure",
    )

    return parser.parse_args(args)


def get(url: str) -> Json:
    with request.urlopen(
        Request(
            url=url,
            headers={"Accepts": "application/json"},
        )
    ) as response:
        return json.load(response)


def post(url: str, data: bytes) -> Json:
    with request.urlopen(
        Request(
            method="POST",
            url=url,
            headers={
                "Content-Type": "application/json",
                "Accepts": "application/json",
            },
            data=data,
        )
    ) as response:
        return json.load(response)


class DigFilterByKeySpec(TypedDict):
    key: str
    value: Json


class DigFilterByKey(TypedDict):
    filterByKey: DigFilterByKeySpec


class DigError(Exception): ...


def dig(j: Json, path: list[str | DigFilterByKey]) -> Json:
    match (j, path):
        case (dict(), [p, *ps]):
            match p:
                case str():
                    return dig(j[p], ps)
                case _:
                    raise DigError("Unexpected %s received at %s", p, j)
        case (list(), [p, *ps]):
            match p:
                case "*":
                    return [dig(element, ps) for element in j]
                case str():
                    return dig(j[int(p)], ps)
                case _:
                    filter_by_key = p["filterByKey"]
                    filtered: Json = [
                        element
                        for element in j
                        if isinstance(element, dict)
                        and element.get(filter_by_key["key"]) == filter_by_key["value"]
                    ]
                    return dig(filtered, ps)
        case (_, []):
            return j
        case _:
            raise DigError("Non-empty path (%s) for (%s)", path, j)


def patch(j: Json, value: Json, path: list[str]) -> Json:
    match (j, value, path):
        # case: \`j\` is a \`dict\` and \`path\` is non-empty
        case (dict(), _, [p, *ps]):
            return j | {p: patch(j[p], value, ps)}
        # case: \`j\` is a \`list\` and \`path\` is non-empty
        case (list(), _, [p, *ps]):
            if p == "*":
                return [patch(element, value, ps) for element in j]
            else:
                index = int(p)
                return j[:index] + [patch(j[index], value, ps)] + j[index + 1 :]
        # case: \`path\` is empty (i.e., the data structure to patch has been reached)
        case (_, _, []):
            return value
        # case: \`path\` is non-empty and \`j\` is of a non-"container" type
        case _:
            return j


def main():
    args = parse_args(sys.argv[1:])

    def _post():
        payload: Json = args.payload_to_post

        if args.patch_path_for_payload_to_post is not None:
            payload = patch(
                args.payload_to_post,
                value=args.patch_value_for_payload_to_post,
                path=args.patch_path_for_payload_to_post,
            )

        response = post(
            url=args.url_to_post,
            data=json.dumps(payload).encode(),
        )
        return dig(response, path=args.post_response_return_value_path)

    result: Json

    try:
        get_response = get(args.url_to_get)
        get_response_value = dig(get_response, path=args.get_response_check_path)
    except (DigError, IndexError, KeyError):
        result = _post()
    else:
        if get_response_value != args.get_response_failed_value:
            result = dig(get_response, path=args.get_response_return_value_path)
        else:
            result = _post()

    if isinstance(result, str):
        print(result)
    else:
        print(json.dumps(result))


if __name__ == "__main__":
    main()
",
          },
          "serviceAccountName": "melt-argo-executor-service-account-c853ed23",
        },
      ],
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "melt-argo-reader-role-c888b548",
      "namespace": "melt-argo",
    },
    "rules": [
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "cronworkflows",
        ],
        "verbs": [
          "create",
          "delete",
          "get",
          "list",
          "patch",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflows",
        ],
        "verbs": [
          "create",
          "delete",
          "get",
          "list",
          "patch",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "argoproj.io",
        ],
        "resources": [
          "workflowtemplates",
        ],
        "verbs": [
          "create",
          "delete",
          "get",
          "list",
          "patch",
          "watch",
        ],
      },
    ],
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "rolebindingc8b55246ed08f34e234894e82162270a3b-c8726a4f",
      "namespace": "melt-argo",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "melt-argo-reader-role-c888b548",
    },
    "subjects": [
      {
        "apiGroup": "",
        "kind": "ServiceAccount",
        "name": "melt-argo-reader-service-account-c883010c",
        "namespace": "melt-argo",
      },
    ],
  },
  {
    "apiVersion": "v1",
    "automountServiceAccountToken": false,
    "kind": "ServiceAccount",
    "metadata": {
      "name": "melt-argo-reader-service-account-c883010c",
      "namespace": "melt-argo",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubernetes.io/service-account.name": "melt-argo-reader-service-account-c883010c",
      },
      "name": "melt-argo-reader-service-account-secret-c820509a",
      "namespace": "melt-argo",
    },
    "type": "kubernetes.io/service-account-token",
  },
]
`;

exports[`Synthesis argoWorkflowsNamespace 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "name": "melt-argo",
    },
  },
]
`;

exports[`Synthesis postgres 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "melt-postgres-secret",
      "namespace": "kube-system",
    },
    "stringData": {
      "adminPassword": "admin-password",
      "meltPassword": "melt-password",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "primary",
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/version": "16.3.0",
        "helm.sh/chart": "postgresql-15.4.0",
      },
      "name": "melt-postgres-helm-c816cbd0-postgresql",
      "namespace": "melt-postgres-namespace",
    },
    "spec": {
      "egress": [
        {},
      ],
      "ingress": [
        {
          "ports": [
            {
              "port": 5432,
            },
          ],
        },
      ],
      "podSelector": {
        "matchLabels": {
          "app.kubernetes.io/component": "primary",
          "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
          "app.kubernetes.io/name": "postgresql",
        },
      },
      "policyTypes": [
        "Ingress",
        "Egress",
      ],
    },
  },
  {
    "apiVersion": "v1",
    "automountServiceAccountToken": false,
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/version": "16.3.0",
        "helm.sh/chart": "postgresql-15.4.0",
      },
      "name": "melt-postgres-helm-c816cbd0-postgresql",
      "namespace": "melt-postgres-namespace",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "primary",
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/version": "16.3.0",
        "helm.sh/chart": "postgresql-15.4.0",
      },
      "name": "melt-postgres-helm-c816cbd0-postgresql-hl",
      "namespace": "melt-postgres-namespace",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql",
        },
      ],
      "publishNotReadyAddresses": true,
      "selector": {
        "app.kubernetes.io/component": "primary",
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/name": "postgresql",
      },
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "primary",
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/version": "16.3.0",
        "helm.sh/chart": "postgresql-15.4.0",
      },
      "name": "melt-postgres-helm-c816cbd0-postgresql",
      "namespace": "melt-postgres-namespace",
    },
    "spec": {
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql",
        },
      ],
      "selector": {
        "app.kubernetes.io/component": "primary",
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/name": "postgresql",
      },
      "sessionAffinity": "None",
      "type": "ClusterIP",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "primary",
        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/version": "16.3.0",
        "helm.sh/chart": "postgresql-15.4.0",
      },
      "name": "melt-postgres-helm-c816cbd0-postgresql",
      "namespace": "melt-postgres-namespace",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/component": "primary",
          "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
          "app.kubernetes.io/name": "postgresql",
        },
      },
      "serviceName": "melt-postgres-helm-c816cbd0-postgresql-hl",
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "primary",
            "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "postgresql",
            "app.kubernetes.io/version": "16.3.0",
            "helm.sh/chart": "postgresql-15.4.0",
          },
          "name": "melt-postgres-helm-c816cbd0-postgresql",
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "primary",
                        "app.kubernetes.io/instance": "melt-postgres-helm-c816cbd0",
                        "app.kubernetes.io/name": "postgresql",
                      },
                    },
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432",
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql",
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data",
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "melt",
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "meltPassword",
                      "name": "melt-postgres-secret",
                    },
                  },
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "adminPassword",
                      "name": "melt-postgres-secret",
                    },
                  },
                },
                {
                  "name": "POSTGRES_DATABASE",
                  "value": "database",
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no",
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no",
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false",
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false",
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false",
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off",
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error",
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit",
                },
              ],
              "image": "docker.io/bitnami/postgresql:16.3.0-debian-12-r8",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U "melt" -d "dbname=database" -h 127.0.0.1 -p 5432",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "postgresql",
              "ports": [
                {
                  "containerPort": 5432,
                  "name": "tcp-postgresql",
                },
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U "melt" -d "dbname=database" -h 127.0.0.1 -p 5432
[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": {
                "limits": {
                  "cpu": "150m",
                  "ephemeral-storage": "1024Mi",
                  "memory": "192Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "ephemeral-storage": "50Mi",
                  "memory": "128Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsGroup": 1001,
                "runAsNonRoot": true,
                "runAsUser": 1001,
                "seLinuxOptions": {},
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/tmp",
                  "name": "empty-dir",
                  "subPath": "tmp-dir",
                },
                {
                  "mountPath": "/opt/bitnami/postgresql/conf",
                  "name": "empty-dir",
                  "subPath": "app-conf-dir",
                },
                {
                  "mountPath": "/opt/bitnami/postgresql/tmp",
                  "name": "empty-dir",
                  "subPath": "app-tmp-dir",
                },
                {
                  "mountPath": "/dev/shm",
                  "name": "dshm",
                },
                {
                  "mountPath": "/bitnami/postgresql",
                  "name": "data",
                },
              ],
            },
          ],
          "hostIPC": false,
          "hostNetwork": false,
          "securityContext": {
            "fsGroup": 1001,
            "fsGroupChangePolicy": "Always",
            "supplementalGroups": [],
            "sysctls": [],
          },
          "serviceAccountName": "melt-postgres-helm-c816cbd0-postgresql",
          "volumes": [
            {
              "emptyDir": {},
              "name": "empty-dir",
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "dshm",
            },
          ],
        },
      },
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate",
      },
      "volumeClaimTemplates": [
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "data",
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce",
            ],
            "resources": {
              "requests": {
                "storage": "8Gi",
              },
            },
          },
        },
      ],
    },
  },
]
`;

exports[`Synthesis postgresNamespace 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "name": "melt-postgres-namespace",
    },
  },
]
`;
